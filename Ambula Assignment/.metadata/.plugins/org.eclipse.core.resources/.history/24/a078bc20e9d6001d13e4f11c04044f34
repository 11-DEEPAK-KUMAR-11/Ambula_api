package com.ambula.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;


@Configuration
@EnableWebSecurity
public class SecurityConfig {


	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    http.authorizeHttpRequests()
	            .requestMatchers("/users/get_users/**").hasRole("READER")
	            .requestMatchers("/users/**").hasRole("ADMIN")
	            .anyRequest().authenticated()
	            .and()
	        .formLogin()
	            .and()
	            .httpBasic().and()
	        .csrf().disable();
	             // Disable CSRF protection
	        
	    return http.build();
	}


	@Bean
	public PasswordEncoder passwordEncoder() {

		return new BCryptPasswordEncoder();

	}
	


    @Bean
    public UserDetailsService userDetailsService() {
    	
        
        UserDetails admin = User
                .withUsername("admin")
                .password(passwordEncoder().encode("admin"))
                .roles("ADMIN")
                .build();
        
        UserDetails reader =User
                .withUsername("reader")
                .password(passwordEncoder().encode("reader"))
                .roles("READER")
                .build();
        
        return new InMemoryUserDetailsManager(admin, reader);
    }
}
