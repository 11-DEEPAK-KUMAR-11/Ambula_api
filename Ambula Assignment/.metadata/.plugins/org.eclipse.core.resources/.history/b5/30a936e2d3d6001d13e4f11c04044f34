package com.ambula.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.HeadersConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	    http.csrf().disable()
	        .authorizeHttpRequests()
	            .requestMatchers(HttpMethod.POST,"/users/add").hasRole("ADMIN")
	            .requestMatchers(HttpMethod.PUT,"/users/**").hasRole("ADMIN")
	            .requestMatchers(HttpMethod.DELETE,"/users/**").hasRole("ADMIN")
	            .requestMatchers(HttpMethod.GET,"/users/get_users/**").hasRole("READER")
	            .anyRequest().authenticated()
	            .and()
	        .httpBasic()
	            .and()
	        .sessionManagement()
	            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	            .and()
	        .headers()
	            .contentSecurityPolicy("default-src 'self'; frame-ancestors 'none';");
	    
	    http.exceptionHandling()
	            .accessDeniedPage("/403");
	    
	    return http.build();
	}
	
//	@Bean
//	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
//	    http.authorizeHttpRequests()
//	            .requestMatchers("/users/add").hasRole("ADMIN")
//	            .requestMatchers("/users/**").hasRole("ADMIN")
//	            .requestMatchers("/users/**").hasRole("ADMIN")
//	            .requestMatchers("/users/get_users/**").hasRole("READER")
//	            .anyRequest().authenticated()
//	            .and()
//	        .formLogin()
//	            .and()
//	        .csrf()
//	            .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());; // Disable CSRF protection
//	        
//	    return http.build();
//	}




    @Bean
    public UserDetailsService userDetailsService() {
    	
        PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
        User.UserBuilder userBuilder = User.builder().passwordEncoder(encoder::encode);
        
        UserDetails admin = userBuilder
                .username("admin")
                .password("password")
                .roles("ADMIN")
                .build();
        
        UserDetails reader = userBuilder
                .username("reader")
                .password("password")
                .roles("READER")
                .build();
        
        return new InMemoryUserDetailsManager(admin, reader);
    }
}
